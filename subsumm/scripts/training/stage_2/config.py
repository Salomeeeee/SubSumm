def amasum_cons_setting(args):
    args.batch_size = getattr(args, 'batch_size', 1)
    args.epoch = getattr(args, 'epoch', 10)
    args.report_freq = getattr(args, "report_freq", 50)
    args.accumulate_step = getattr(args, "accumulate_step", 16)
    args.margin = getattr(args, "margin", 0.001)
    args.gold_margin = getattr(args, "gold_margin", 0)
    args.gold_weight = getattr(args, "gold_weight", 0)
    args.mle_weight = getattr(args, "mle_weight", 1)
    args.rank_weight = getattr(args, "rank_weight", 1)
    args.model_type = getattr(args, "model_type", "bart")
    args.warmup_steps = getattr(args, "warmup_steps", 3000)
    args.normalize = getattr(args, "normalize", True)
    args.grad_norm = getattr(args, "grad_norm", 0)
    args.seed = getattr(args, "seed", 970903)
    args.no_gold = getattr(args, "no_gold", False)
    args.pretrained = getattr(args, "pretrained", None)
    args.max_lr = getattr(args, "max_lr", 1e-3)
    args.scale = getattr(args, "scale", 1)
    args.score_mode = getattr(args, "score_mode", "log")
    args.datatype = getattr(args, "datatype", "cons")
    args.dataset = getattr(args, "dataset", "amasum")
    args.max_len = getattr(args, "max_len", 120)
    args.max_num = getattr(args, "max_num", 16)
    args.smooth = getattr(args, "smooth", 0.1)
    args.total_len = getattr(args, "total_len", 1024)
    args.rank_length_penalty = getattr(args, "rank_length_penalty", 2)
    args.gen_length_penalty = getattr(args, "gen_length_penalty", 0.5)
    args.do_sample = getattr(args, "do_sample", True)
    args.gen_max_len = getattr(args, "gen_max_len", 200)
    args.gen_min_len = getattr(args, "gen_min_len", 25)
    args.is_pegasus = getattr(args, "is_pegasus", False)
    args.adding = getattr(args, "adding", 0)
    args.eval_interval = getattr(args, "eval_interval", 200)
    args.num_beams = getattr(args, "num_beams", 5)
    args.proj_name = getattr(args, "proj_name", "cons_ex1")
    args.data_path = getattr(args, "data_path", "/nfs-data/user19/brio_data2")
    args.cache_path = getattr(args, "cache_path", "/nfs-data/user19/brio_cache")
    args.no_overlap = getattr(args, "no_overlap", False)


def amasum_pros_setting(args):
    args.batch_size = getattr(args, 'batch_size', 1)
    args.epoch = getattr(args, 'epoch', 10)
    args.report_freq = getattr(args, "report_freq", 50) 
    args.accumulate_step = getattr(args, "accumulate_step", 16)  
    args.margin = getattr(args, "margin", 0.001)
    args.gold_margin = getattr(args, "gold_margin", 0)
    args.gold_weight = getattr(args, "gold_weight", 0)
    args.mle_weight = getattr(args, "mle_weight", 10)    
    args.rank_weight = getattr(args, "rank_weight", 1)
    args.model_type = getattr(args, "model_type", "bart")
    args.warmup_steps = getattr(args, "warmup_steps", 3000) 
    args.normalize = getattr(args, "normalize", True)
    args.grad_norm = getattr(args, "grad_norm", 0)
    args.seed = getattr(args, "seed", 970903)
    args.no_gold = getattr(args, "no_gold", False)
    args.pretrained = getattr(args, "pretrained", None)
    args.max_lr = getattr(args, "max_lr", 1e-3) 
    args.scale = getattr(args, "scale", 1)
    args.score_mode = getattr(args, "score_mode", "log")
    args.datatype = getattr(args, "datatype", "pros")   # cons, pros, verd, rt
    args.dataset = getattr(args, "dataset", "amasum")
    args.max_len = getattr(args, "max_len", 120)
    args.max_num = getattr(args, "max_num", 16)
    args.smooth = getattr(args, "smooth", 0.1)
    args.total_len = getattr(args, "total_len", 1024)
    args.rank_length_penalty = getattr(args, "rank_length_penalty", 2)  
    args.gen_length_penalty = getattr(args, "gen_length_penalty", 0.5)  
    args.do_sample = getattr(args, "do_sample", True)
    args.gen_max_len = getattr(args, "gen_max_len", 200)
    args.gen_min_len = getattr(args, "gen_min_len", 35) 
    args.is_pegasus = getattr(args, "is_pegasus", False)
    args.adding = getattr(args, "adding", 0)
    args.eval_interval = getattr(args, "eval_interval", 200)    
    args.num_beams = getattr(args, "num_beams", 5)  
    args.proj_name = getattr(args, "proj_name", "pros_ex1")   
    args.data_path = getattr(args, "data_path", "/nfs-data/user19/brio_data2")      
    args.cache_path = getattr(args, "cache_path", "/nfs-data/user19/brio_cache")
    args.no_overlap = getattr(args, "no_overlap", False) 


def amasum_verd_setting(args):
    args.batch_size = getattr(args, 'batch_size', 1)
    args.epoch = getattr(args, 'epoch', 10)
    args.report_freq = getattr(args, "report_freq", 50) 
    args.accumulate_step = getattr(args, "accumulate_step", 16)  
    args.margin = getattr(args, "margin", 0.001)
    args.gold_margin = getattr(args, "gold_margin", 0)
    args.gold_weight = getattr(args, "gold_weight", 0)
    args.mle_weight = getattr(args, "mle_weight", 10)    
    args.rank_weight = getattr(args, "rank_weight", 1)
    args.model_type = getattr(args, "model_type", "bart")
    args.warmup_steps = getattr(args, "warmup_steps", 3000) 
    args.normalize = getattr(args, "normalize", True)
    args.grad_norm = getattr(args, "grad_norm", 0)
    args.seed = getattr(args, "seed", 970903)
    args.no_gold = getattr(args, "no_gold", False)
    args.pretrained = getattr(args, "pretrained", None)
    args.max_lr = getattr(args, "max_lr", 1e-3) 
    args.scale = getattr(args, "scale", 1)
    args.score_mode = getattr(args, "score_mode", "log")
    args.datatype = getattr(args, "datatype", "verd")   # cons, pros, verd, rt
    args.dataset = getattr(args, "dataset", "amasum")
    args.max_len = getattr(args, "max_len", 120)
    args.max_num = getattr(args, "max_num", 16)
    args.smooth = getattr(args, "smooth", 0.1)
    args.total_len = getattr(args, "total_len", 1024)
    args.rank_length_penalty = getattr(args, "rank_length_penalty", 2)  
    args.gen_length_penalty = getattr(args, "gen_length_penalty", 1.0)  
    args.do_sample = getattr(args, "do_sample", True)
    args.gen_max_len = getattr(args, "gen_max_len", 200)
    args.gen_min_len = getattr(args, "gen_min_len", 25) 
    args.is_pegasus = getattr(args, "is_pegasus", False)
    args.adding = getattr(args, "adding", 0)
    args.eval_interval = getattr(args, "eval_interval", 200)    
    args.num_beams = getattr(args, "num_beams", 5)  
    args.proj_name = getattr(args, "proj_name", "verd_ex1")   
    args.data_path = getattr(args, "data_path", "/nfs-data/user19/brio_data2")      
    args.cache_path = getattr(args, "cache_path", "/nfs-data/user19/brio_cache")
    args.no_overlap = getattr(args, "no_overlap", True) 


def rotten_setting(args):
    args.batch_size = getattr(args, 'batch_size', 1)
    args.epoch = getattr(args, 'epoch', 10)
    args.report_freq = getattr(args, "report_freq", 50) 
    args.accumulate_step = getattr(args, "accumulate_step", 16)  
    args.margin = getattr(args, "margin", 0.001)
    args.gold_margin = getattr(args, "gold_margin", 0)
    args.gold_weight = getattr(args, "gold_weight", 0)
    args.mle_weight = getattr(args, "mle_weight", 10)    
    args.rank_weight = getattr(args, "rank_weight", 1)
    args.model_type = getattr(args, "model_type", "bart")
    args.warmup_steps = getattr(args, "warmup_steps", 300) 
    args.normalize = getattr(args, "normalize", True)
    args.grad_norm = getattr(args, "grad_norm", 0)
    args.seed = getattr(args, "seed", 970903)
    args.no_gold = getattr(args, "no_gold", False)
    args.pretrained = getattr(args, "pretrained", None)
    args.max_lr = getattr(args, "max_lr", 1e-3) 
    args.scale = getattr(args, "scale", 1)
    args.score_mode = getattr(args, "score_mode", "log")
    args.datatype = getattr(args, "datatype", "rt")   # cons, pros, verd, rt
    args.dataset = getattr(args, "dataset", "rotten")
    args.max_len = getattr(args, "max_len", 120)
    args.max_num = getattr(args, "max_num", 16)
    args.smooth = getattr(args, "smooth", 0.1)
    args.total_len = getattr(args, "total_len", 1024)
    args.rank_length_penalty = getattr(args, "rank_length_penalty", 2)  
    args.gen_length_penalty = getattr(args, "gen_length_penalty", 1.0)  
    args.do_sample = getattr(args, "do_sample", True)
    args.gen_max_len = getattr(args, "gen_max_len", 200)
    args.gen_min_len = getattr(args, "gen_min_len", 30) 
    args.is_pegasus = getattr(args, "is_pegasus", False)
    args.adding = getattr(args, "adding", 0)
    args.eval_interval = getattr(args, "eval_interval", 200)    
    args.num_beams = getattr(args, "num_beams", 5)  
    args.proj_name = getattr(args, "proj_name", "rt_ex1")   
    args.data_path = getattr(args, "data_path", "/nfs-data/user19/brio_data2")      
    args.cache_path = getattr(args, "cache_path", "/nfs-data/user19/brio_cache")
    args.no_overlap = getattr(args, "no_overlap", True) 

